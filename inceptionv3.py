# -*- coding: utf-8 -*-
"""inceptionv3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1IPWcRDwYChn5jJSnPNIaKAW5_ZUFSThj
"""

!pip install tensorflow-gpu

!nvidia-smi

from tensorflow.compat.v1 import ConfigProto
from tensorflow.compat.v1 import InteractiveSession
config = ConfigProto()
config.gpu_options.per_process_gpu_memory_fraction = 0.5
config.gpu_options.allow_growth = True
session = InteractiveSession(config=config)

import tensorflow
print(tensorflow.__version__)

from tensorflow.keras.layers import Input, Lambda, Dense, Flatten
from tensorflow.keras.models import Model
from tensorflow.keras.applications.inception_v3 import InceptionV3
from tensorflow.keras.applications.inception_v3 import preprocess_input
from tensorflow.keras.preprocessing import image
from tensorflow.keras.preprocessing.image import ImageDataGenerator,load_img
from tensorflow.keras.models import Sequential
import numpy as np
from glob import glob

IMAGE_SIZE = [224, 224]
train_path = '/content/drive/MyDrive/dataset/Train'
valid_path = '/content/drive/MyDrive/dataset/Validation'

inception = InceptionV3(input_shape=IMAGE_SIZE + [3], weights='imagenet', include_top=False)

for layer in inception.layers:
    layer.trainable = False

folders = glob('/content/drive/MyDrive/dataset/Train/*')

x = Flatten()(inception.output)

prediction = Dense(len(folders), activation='softmax')(x)

model = Model(inputs=inception.input, outputs=prediction)

model.summary()

model.compile(
  loss='categorical_crossentropy',
  optimizer='adam',
  metrics=['accuracy']
)

from tensorflow.keras.preprocessing.image import ImageDataGenerator

train_datagen = ImageDataGenerator(rescale = 1./255,
                                   rotation_range=40,
                                   width_shift_range=0.2,
                                   height_shift_range=0.2,
                                   shear_range = 0.2,
                                   zoom_range = 0.2,
                                   horizontal_flip = True)

test_datagen = ImageDataGenerator(rescale = 1./255)

training_set = train_datagen.flow_from_directory('/content/drive/MyDrive/dataset/Train',
                                                 target_size = (224, 224),
                                                 batch_size = 16,
                                                 class_mode = 'categorical')

Validation_set = test_datagen.flow_from_directory('/content/drive/MyDrive/dataset/Validation',
                                            target_size = (224, 224),
                                            batch_size = 16,
                                            class_mode = 'categorical')

test = test_datagen.flow_from_directory('/content/drive/MyDrive/dataset/Test',
                                            target_size = (224, 224),
                                            batch_size = 1,
                                            class_mode = None,
                                            shuffle=False,
                                        seed=42
                                      )

r = model.fit_generator(
  training_set,
  validation_data=test_set,
  epochs=15,
  steps_per_epoch=len(training_set),
  validation_steps=len(Validation_set)
)

import matplotlib.pyplot as plt
# plot the loss
plt.plot(r.history['loss'], label='train loss')
plt.plot(r.history['val_loss'], label='val loss')
plt.legend()
plt.show()
plt.savefig('LossVal_loss')

# plot the accuracy
plt.plot(r.history['accuracy'], label='train acc')
plt.plot(r.history['val_accuracy'], label='val acc')
plt.legend()
plt.show()
plt.savefig('AccVal_acc')

STEP_SIZE_TEST=test.n//test.batch_size
test.reset()
pred=model.predict_generator(test,
steps=STEP_SIZE_TEST,
verbose=1)

predicted_class_indices=np.argmax(pred,axis=1)

labels = (training_set.class_indices)
labels = dict((v,k) for k,v in labels.items())
predictions = [labels[k] for k in predicted_class_indices]
len(labels)
len(predictions)

filenames=test.filenames
import pandas as pd
df=pd.DataFrame({"images":filenames,
                      "labels":predictions})

df['images'] = df['images'].replace('Bag/+','',regex=True)
df['images'] = df['images'].replace('Bat/+','',regex=True)
df['images'] = df['images'].replace('Bathtub/+','',regex=True)
df['images'] = df['images'].replace('Binocular/+','',regex=True)
df['images'] = df['images'].replace('Cactus/+','',regex=True)
df['images'] = df['images'].replace('Calculator/+','',regex=True)
df['images'] = df['images'].replace('Chopsticks/+','',regex=True)
df['images'] = df['images'].replace('Computer Keyboard/+','',regex=True)
df['images'] = df['images'].replace('Computer Monitor/+','',regex=True)
df['images'] = df['images'].replace('Computer Mouse/+','',regex=True)
df['images'] = df['images'].replace('Insect/+','',regex=True)
df['images'] = df['images'].replace('Mug/+','',regex=True)
df['images'] = df['images'].replace('Radio/+','',regex=True)
  
#writing into the file
df.to_csv("Allmighty.csv", index=False)
  
print(df)